import org.joda.time.DateTime
import org.joda.time.DateTimeZone

plugins {
	id 'java'
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id "com.bmuschko.docker-remote-api" version "6.6.1"
	id 'com.bmuschko.docker-spring-boot-application' version '6.6.1'
	id "com.patdouble.awsecr" version "0.6.1"
}

dependencies {
	// Spring Boot deps, with logback excluded. Defined first to ensure the dependencies declared in it are resolved first
	implementation platform(libraries.springBoot.dependencies), libraries.springBoot.exclusions

	implementation libraries.springBoot.starterWeb, libraries.springBoot.exclusions
	implementation libraries.springBoot.starterActuator, libraries.springBoot.exclusions
	implementation libraries.springBoot.starterTomcat, libraries.springBoot.exclusions

	implementation libraries.gson

	implementation libraries.slf4j.api
	implementation libraries.slf4j.simple

	implementation libraries.springfoxSwaggerStarter

	developmentOnly libraries.springBoot.devTools, libraries.springBoot.exclusions
	testImplementation libraries.springBoot.starterTest, libraries.springBoot.testExclusions
}

jar {
	from('../frontend/dist') {
		into 'static'
	}
}

task generateVersionInfo {
		doLast {
			def git = grgit.open(dir: "${rootProject.projectDir}/.git")
			def branchName = git.branch.current().getName().trim();
			def hash = git.resolve.toCommit(git.branch.current()).id;
			def buildTime = Long.toString(DateTime.now(DateTimeZone.UTC).getMillis());

			File targetDirectory = new File("${project.buildDir}/generated-resources/")
			if(!targetDirectory.exists()) {
				targetDirectory.mkdirs();
			}

			File versionFile = new File(targetDirectory, "version.properties")
			if(!versionFile.exists()) {
				versionFile.createNewFile();
			}
			FileWriter vfw = new FileWriter(versionFile);
			vfw.write("pidigits.version: ${rootProject.version}\n");
			vfw.write("pidigits.hash: ${hash}\n");
			vfw.write("pidigits.branch: ${branchName}\n");
			vfw.write("pidigits.buildTime: ${buildTime}\n");
			vfw.flush();
			vfw.close();
		}
}

sourceSets {
	main {
		resources {
			srcDirs "src/main/resources", "${project.buildDir}/generated-resources"
		}
	}
}

bootJar {
	from('../frontend/build') {
		into 'static'
	}

	mainClassName 'com.github.dgwatts.pidigits.PidigitsApplication'
}

bootJar.dependsOn(generateVersionInfo)
bootJar.dependsOn(':frontend:npm_run_build')

docker {
	springBootApplication {
		maintainer = "dgwatts+yozu@gmail.com"
		baseImage = 'openjdk:8-alpine'
		ports = [8080]
		images.add("${System.env.AWS_ECR_ID}.dkr.ecr.${System.env.AWS_ECR_REGION}.amazonaws.com/${System.env.AWS_ECR_REPO}:${rootProject.version}")
	}

	registryCredentials {
		url = 'https://${System.env.AWS_ECR_ID}.dkr.ecr.${System.env.AWS_ECR_ID}.amazonaws.com'
	}
}

test {
	useJUnitPlatform()
}